



#include "cybsp.h"
#include "cyhal.h"
#include "cy_retarget_io.h"
#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"

/*******************************************************************************
* Macros
*******************************************************************************/
#define mainONE_SHOT_TIMER pdMS_TO_TICKS( 3333 )
#define mainAUTO_RELOAD_TIMER pdMS_TO_TICKS( 500 )

/*******************************************************************************
* Function Prototypes
*******************************************************************************/
 void vPrintStringAndNumber(const char *pcString, uint32_t ul);
 static  void prvOneShotTimerCallback( TimerHandle_t xTimer );
 static void prvAutoReloadTimerCallback( TimerHandle_t xTimer );
/*******************************************************************************
* Global Variables
*******************************************************************************/


/*******************************************************************************
* Function Definitions
*******************************************************************************/
// function to print and number
 void vPrintStringAndNumber(const char *pcString,  uint32_t ul)
{
    printf("%s", pcString);  // Print the string to UART (Retarget IO)
    printf(" %ld\n", ul);  // Print the string to UART (Retarget IO)
}
 static void prvOneShotTimerCallback( TimerHandle_t xTimer )
{
TickType_t xTimeNow;
 xTimeNow = xTaskGetTickCount();
 vPrintStringAndNumber( "One-shot timer callback executing", xTimeNow );

}
 static void prvAutoReloadTimerCallback( TimerHandle_t xTimer )
{
TickType_t xTimeNow;
 xTimeNow = xTaskGetTickCount();
 vPrintStringAndNumber( "Auto-reload timer callback executing", xTimeNow );

}

/**
 * Function Name: main
 * Description: This is the main entry point for the application. It initializes the
 *              hardware, creates FreeRTOS tasks, and starts the scheduler.
 */
int main(void)
{
    cy_rslt_t result;

    /* Initialize the device and board peripherals */
    result = cybsp_init();
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);  // Initialization failed, stop here
    }

    /* Initialize UART for retargeted IO (so we can print to UART) */
    result = cy_retarget_io_init(CYBSP_DEBUG_UART_TX, CYBSP_DEBUG_UART_RX, CY_RETARGET_IO_BAUDRATE);
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);  // UART initialization failed, stop here
    }

    /* Enable global interrupts */
    __enable_irq();
    TimerHandle_t xAutoReloadTimer, xOneShotTimer;
    BaseType_t xTimer1Started, xTimer2Started;
     xOneShotTimer = xTimerCreate(
     "OneShot",
    mainONE_SHOT_TIMER,
     pdFALSE,
    0,
     prvOneShotTimerCallback );
     xAutoReloadTimer = xTimerCreate(
     "AutoReload",
    mainAUTO_RELOAD_TIMER,
     pdTRUE,
    0,
    /* The callback function to be used by the software timer being created. */
     prvAutoReloadTimerCallback );
     /* Check the software timers were created. */
     if( ( xOneShotTimer != NULL ) && ( xAutoReloadTimer != NULL ) )
     {
     xTimer1Started = xTimerStart( xOneShotTimer, 0 );
     xTimer2Started = xTimerStart( xAutoReloadTimer, 0 );
     if( ( xTimer1Started == pdPASS ) && ( xTimer2Started == pdPASS ) )
     {
     vTaskStartScheduler();
     }
     }
     /* As always, this line should not be reached. */
     for( ;; );

}

/* [] END OF FILE */








